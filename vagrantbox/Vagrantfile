# -*- mode: ruby -*-
# vi: set ft=ruby :

# Install prereq plugins - experimental


# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "centos/7"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  config.vm.network "forwarded_port", guest: 8080, host: 8080
  #Config forwarded port for linux flask app
  config.vm.network "forwarded_port", guest: 5000, host: 5001

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "../", "/git/vagrant", create: true, type: "rsync", rsync__auto: true
  config.vm.synced_folder "../../jenkinsfile", "/git/jenkinsfile", create: true, type: "rsync", rsync__auto: true
  #config.vm.synced_folder "c:/git", "/git", create: true, type: "rsync", rsync__auto: true
  #config.vm.synced_folder "C:/git", "/git", create: true, type: "rsync"
  config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
   config.vm.provider "virtualbox" do |vb|
     # Display the VirtualBox GUI when booting the machine
  vb.gui = true
  vb.name = "my_vm"
  #
  #   # Customize the amount of memory on the VM:
  vb.memory = "4048"
   end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision :shell, :inline => "sudo rm /etc/localtime && sudo ln -s /usr/share/zoneinfo/Australia/Sydney /etc/localtime", run: "always"
  config.vm.provision "shell", inline: <<-SHELL
    sudo yum -y update
	sudo cp -r /git/vagrant/vagrantbox/repo/* /etc/yum.repos.d/
    sudo yum groupinstall --nogpgcheck -y "GNOME Desktop" && sudo yum install -y python-devel.x86_64 "@Development Tools"
	sudo ln -sf /lib/systemd/system/runlevel5.target /etc/systemd/system/default.target
	sudo python /git/vagrant/vagrantbox/get-pip.py
	sudo pip install ansible
	#Install docker
	sudo yum install -y docker-engine && sudo systemctl enable docker.service && sudo systemctl start docker
	#Install google-chrome
	sudo yum install -y google-chrome-stable.x86_64
	#Install Jenkins
	sudo wget --no-check-certificate -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo && sudo rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key && sudo yum install -y jenkins
	sudo docker pull docker.bintray.io/jfrog/artifactory-oss
  SHELL
end
